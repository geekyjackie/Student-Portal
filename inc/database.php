<?php

class Database {

    /**
     * PDO Options
     * @var array contains PDO options 
     */
    public static $options = array();

    /**
     * PDO Connection holder
     * @var PDO PDO connection object 
     */
    protected $con;

    /**
     * Fetched Result holder
     * @var object ResultSet object
     */
    protected $rs;

    /**
     * Last insert ID, Afftected rows holder
     * @var int Contains id/counts generated by SQL Query
     */
    private $row_id;

    
    /**
     * 
     * @throws PDOException
     */
    public function __construct() {
        if (empty(self::$options)) {
            self::$options = array(
                PDO::ATTR_PERSISTENT => true,
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8"
            );
        }
        try {
            $dsn = 'mysql:host=' . DB_HOST . ';dbname=' . DB_NAME;
            $this->con = new PDO($dsn, DB_USER, DB_PASS, self::$options);
        } catch (PDOException $e) {
            throw $e;
        }
    }

    /**
     * Execute query
     * @param string $stmt SQL statemebt
     * @param array|string $args one or more SQL Statement arguments (if needed)
     * @return \Database
     * @throws PDOException
     */
    public function query($stmt, $args = NULL) {
        $output = FALSE;
        try {
            $qprm = (!is_null($args) && !is_array($args)) ? array($args) : $args;
            $this->rs = $this->con->prepare($stmt);
            if (is_null($qprm)) {
                $this->rs->execute();
            } else {
                $this->rs->execute($qprm);
            }
            $this->row_id = $this->rs->rowCount();
            $output = $this;
        } catch (PDOException $e) {
            throw $e;
        }
        return $output;
    }
    
    /**
     * Run INSERT,DELETE,UPDATE,ALTER like queries
     * @param string $stmt SQL Statement
     * @param array|string $args one or more arguments (if needed)
     * @return \Database
     * @throws PDOException
     */
    public function runQuery($stmt, $args = NULL) {
        $output = FALSE;
        try {
            $qprm = (!is_null($args) && !is_array($args)) ? array($args) : $args;
            $this->rs = $this->con->prepare($stmt);
            if ($qprm == null) {
                $this->rs->execute();
            } else {
                $this->rs->execute($qprm);
            }
            $this->row_id = $this->con->lastInsertId();
            $output = $this;
        } catch (PDOException $e) {
            throw $e;
        }
        return $output;
    }
    
    /**
     * Query specified fields value as associative array
     * @param string $stmt SQL Statement
     * @param array|string $fields fields to query values
     * @param array $args SQL statement arguments
     * @return mixed Return array containing fields values, False on empty set
     * @throws PDOException
     */
    public function queryValues($stmt, $fields = NULL, $args = NULL) {
        $output = FALSE;
        $fields = (is_array($fields)) ? $fields : array($fields);
        try {
            $db = new Database();
            $db->query($stmt, $args);
            if ($db->rowCount() > 0) {
                $r = $db->fetchArrayAssoc();
                foreach ($fields as $column) {
                    $output[$column] = $r[$column];
                }
            }
        } catch (PDOException $e) {
            throw $e;
        }
        return (object) $output;
    }
    
    /**
     * Fetch row as an object with property names
     * @return object
     */
    public function fetchObject() {
        return $this->rs->fetch(PDO::FETCH_OBJ);
    }
    
    /**
     * Fetch row as an array indexed by both column name and number
     * @return array
     */
    public function fetchArray() {
        return $this->rs->fetch(PDO::FETCH_BOTH);
    }
    
    /**
     * Fetch row as an array indexed by column number
     * @return array
     */
    public function fetchArrayNum() {
        return $this->rs->fetch(PDO::FETCH_NUM);
    }
    
    /**
     * Fetch row as an array indexed by column name
     * @return array
     */
    public function fetchArrayAssoc() {
        return $this->rs->fetch(PDO::FETCH_ASSOC);
    }
    
    public function fetchAll($fetchStyle = NULL){
        return $this->rs->fetchAll($fetchStyle);
    }
    
    public function fetchAllAsObject(){
        return $this->rs->fetchAll(PDO::FETCH_OBJ);
    }
    
    public function fetchAllAsArray(){
        return $this->rs->fetchAll(PDO::FETCH_BOTH);
    }
    
    /**
     * Return number of rows affected by last query
     * @return int number of rows
     */
    public function rowCount() {
        return $this->row_id;
    }
    
    /**
     * Return Row ID generated by last query
     * Return AUTO_INCREMENT ID generated by INSERT query
     * Return affected rows generated by UPDATE, DLETE etc
     * @return int The ID generated by last query
     */
    public function lastInsertId() {
        return $this->row_id;
    }

    /**
     * 
     * @return \Database
     * @throws PDOException
     */
    public function beginTransaction(){
        if(!$this->con->beginTransaction()){
            throw new PDOException("Unable to start Transaction");
        }
        return $this;
    }
    
    /**
     * 
     * @return type
     */
    public function inTransaction(){
        return $this->con->inTransaction();
    }
    
    /**
     * 
     * @return \Database
     * @throws PDOException
     */
    public function rollBack(){
        if(!$this->con->rollBack()){
            throw new PDOException("Unable to rollBack the transaction");
        }
        return $this;
    }
    
    /**
     * 
     * @return \Database
     * @throws PDOException
     */
    public function commit(){
        if(!$this->con->commit()){
            throw new PDOException("Unable to commit the transaction");
        }
        return $this;
    }
    
    /**
     * Closes connection to the database and release memory
     */
    public function close() {
        $this->con = NULL;
        $this->row_id = NULL;
        $this->rs = NULL;
    }

    /**
     * Destroy everything
     */
    public function __destruct() {
        $this->close();
    }
}